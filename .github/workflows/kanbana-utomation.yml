name: Kanban Automation

on:
  issues:
    types: [opened, closed, labeled]

jobs:
  automate-kanban:
    runs-on: ubuntu-latest
    steps:
      - name: Move Issue on Kanban Board
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.MY_GITHUB_TOKEN }}
          script: |
            console.log('Event:', context.eventName);
            console.log('Action:', context.payload.action);
            console.log('Issue Number:', context.payload.issue.number);
            console.log('Label Added:', context.payload.label ? context.payload.label.name : 'No label');

            const columnMap = {
              'opened': 'To Do',
              'closed': 'Done',
              'labeled': {
                'in-progress': 'In Progress',
                'testing': 'Testing',
                'blocked': 'Blocked'
              }
            };

            const event = context.eventName;
            const issue = context.payload.issue;
            const projectNumber = 2; // Replace with your Sprint 1 Kanban number

            if (!issue) {
              console.log('No issue found in payload');
              return;
            }

            const projectQuery = `
              query($owner: String!, $repo: String!, $projectNumber: Int!) {
                repository(owner: $owner, name: $repo) {
                  projectV2(number: $projectNumber) {
                    id
                    fields(first: 100) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                        }
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;

            const projectVars = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              projectNumber: projectNumber
            };

            const projectResponse = await github.graphql(projectQuery, projectVars);
            const project = projectResponse.repository.projectV2;
            const statusField = project.fields.nodes.find(field => field.name === 'Status');
            const columnOptions = statusField.options;
            console.log('Column Options:', columnOptions.map(opt => opt.name));

            let targetColumnName;
            if (event === 'issues' && issue.state === 'open' && context.payload.action === 'opened') {
              targetColumnName = columnMap.opened;
            } else if (event === 'issues' && issue.state === 'closed') {
              targetColumnName = columnMap.closed;
            } else if (event === 'issues' && context.payload.action === 'labeled') {
              const label = context.payload.label.name.toLowerCase();
              console.log('Lowercase Label:', label);
              targetColumnName = columnMap.labeled[label] || null;
            }

            console.log('Target Column:', targetColumnName);
            if (!targetColumnName) {
              console.log('No target column determined');
              return;
            }

            const targetColumn = columnOptions.find(option => option.name === targetColumnName);
            console.log('Found Column:', targetColumn ? targetColumn.name : 'Not found');
            if (!targetColumn) {
              console.log(`Column "${targetColumnName}" not found`);
              return;
            }

            const itemQuery = `
              query($owner: String!, $repo: String!, $issueNumber: Int!) {
                repository(owner: $owner, name: $repo) {
                  issue(number: $issueNumber) {
                    projectItems(first: 10) {
                      nodes {
                        id
                        project {
                          id
                        }
                      }
                    }
                  }
                }
              }
            `;

            const itemVars = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issueNumber: issue.number
            };

            const itemResponse = await github.graphql(itemQuery, itemVars);
            const item = itemResponse.repository.issue.projectItems.nodes.find(node => node.project.id === project.id);
            console.log('Item Found:', item ? item.id : 'Not linked');

            if (!item) {
              console.log('Issue not linked to project');
              return;
            }

            const mutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: {
                      singleSelectOptionId: $value
                    }
                  }
                ) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;

            await github.graphql(mutation, {
              projectId: project.id,
              itemId: item.id,
              fieldId: statusField.id,
              value: targetColumn.id
            });

            console.log(`Moved issue #${issue.number} to ${targetColumnName}`);
